/*
 * Newton1.java
 *
 * Created on 30. Juli 2008, 16:18
 */
package uva.ig;

import com.sun.opengl.util.Animator;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.opengl.GLCapabilities;
import javax.media.opengl.GLJPanel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu.Separator;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JToolBar;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.plaf.basic.BasicBorders.RadioButtonBorder;

/**
 *
 * @author cylab
 * @author mbien
 */
public class Newton1 extends JFrame {

    private Animator animator;
    private GLRenderer renderer;

    public static final int TEXTURA_MONTANA=1;
    public static final int TEXTURA_MARIO=2;

    /** Creates new form MainFrame */
    public Newton1() {
        initComponents();
        setTitle("Newton's Cradle");

        renderer = new GLRenderer();
        panel.addGLEventListener(renderer);
        animator = new Animator(panel);

        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });

        this.addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent evt) {

                if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
                    renderer.moverCamara(1);
                } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
                    renderer.moverCamara(2);
                } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
                    if ((evt.getModifiers() & KeyEvent.CTRL_MASK) == KeyEvent.CTRL_MASK) {
                        jLabel2.setText(Float.toString(renderer.subirVelocidad()));
                    } else {
                        renderer.moverCamara(3);
                    }
                } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                   if ((evt.getModifiers() & KeyEvent.CTRL_MASK) == KeyEvent.CTRL_MASK) {
                        jLabel2.setText(Float.toString(renderer.bajarVelocidad()));
                    } else {
                        renderer.moverCamara(4);
                    }
                } else if (evt.getKeyCode() == KeyEvent.VK_PLUS || evt.getKeyCode() == KeyEvent.VK_ADD) {
                    renderer.moverCamara(5);
                } else if (evt.getKeyCode() == KeyEvent.VK_MINUS || evt.getKeyCode() == KeyEvent.VK_SUBTRACT) {
                    renderer.moverCamara(6);
                }
            }
        });

        animator.start();
    }

    @Override
    public void setVisible(boolean show) {
        if (!show) {
            animator.stop();
        }
        super.setVisible(show);
        if (!show) {
            animator.start();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new GLJPanel(createGLCapabilites());
        jToolBar1 = new JToolBar();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jMenuBar1 = new JMenuBar();
        jMenu1 = new JMenu();
        jMenuItem1 = new JMenuItem();
        jMenuItem2 = new JMenuItem();
        jSeparator1 = new Separator();
        jMenuItem3 = new JMenuItem();
        jMenu2 = new JMenu();
        jMenuItem6 = new JMenuItem();
        jRadioButtonMenuItem8 = new JRadioButtonMenuItem();
        jRadioButtonMenuItem9 = new JRadioButtonMenuItem();
        jRadioButtonMenuItem10 = new JRadioButtonMenuItem();
        jMenuItem7 = new JMenuItem();
        jRadioButtonMenuItem11 = new JRadioButtonMenuItem();
        jRadioButtonMenuItem12 = new JRadioButtonMenuItem();
        jMenuItem8 = new JMenuItem();
        jRadioButtonMenuItem13 = new JRadioButtonMenuItem();
        jRadioButtonMenuItem14 = new JRadioButtonMenuItem();
        jSeparator2 = new Separator();
        jCheckBoxMenuItem2 = new JCheckBoxMenuItem();
        jMenu3 = new JMenu();
        jRadioButtonMenuItem1 = new JRadioButtonMenuItem();
        jRadioButtonMenuItem2 = new JRadioButtonMenuItem();
        jRadioButtonMenuItem3 = new JRadioButtonMenuItem();
        jRadioButtonMenuItem4 = new JRadioButtonMenuItem();
        jRadioButtonMenuItem5 = new JRadioButtonMenuItem();
        jMenu4 = new JMenu();
        jRadioButtonMenuItem6 = new JRadioButtonMenuItem();
        jRadioButtonMenuItem7 = new JRadioButtonMenuItem();
        jSeparator4 = new Separator();
        jCheckBoxMenuItem1 = new JCheckBoxMenuItem();
        jMenu5 = new JMenu();
        jRadioButtonMenuItem15 = new JRadioButtonMenuItem();
        jRadioButtonMenuItem16 = new JRadioButtonMenuItem();
        jMenu6 = new JMenu();
        jMenuItem4 = new JMenuItem();
        jSeparator3 = new Separator();
        jMenuItem5 = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        panel.setPreferredSize(new Dimension(600, 400));
        panel.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                panelMousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                panelMouseReleased(evt);
            }
        });
        panel.addMouseMotionListener(new MouseMotionAdapter() {
            public void mouseDragged(MouseEvent evt) {
                panelMouseDragged(evt);
            }
        });

        GroupLayout panelLayout = new GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 463, Short.MAX_VALUE)
        );

        jToolBar1.setRollover(true);

        jLabel1.setText("Speed: ");
        jLabel1.setToolTipText("Current speed of the animation, press Ctrl+Up or Ctrl+Down to increase or decrease ");
        jToolBar1.add(jLabel1);

        jLabel2.setText("1.0");
        jLabel2.setToolTipText("Current speed of the animation, press Ctrl+Up or Ctrl+Down to increase or decrease");
        jToolBar1.add(jLabel2);

        jMenu1.setText("Cradle");

        jMenuItem1.setText("Restart animation");
        jMenuItem1.setToolTipText("Stops the current animation so that a new one can be started");
        jMenuItem1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Restart camera");
        jMenuItem2.setToolTipText("Recovers the initial camera position");
        jMenuItem2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator1);

        jMenuItem3.setText("Exit");
        jMenuItem3.setToolTipText("Exits the Newton's Cradle application");
        jMenuItem3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Appearance");
        jMenu2.setToolTipText("Activates a plastic looking material for the balls");

        jMenuItem6.setText("Material");
        jMenuItem6.setEnabled(false);
        jMenu2.add(jMenuItem6);

        jRadioButtonMenuItem8.setSelected(true);
        jRadioButtonMenuItem8.setText("Plastic");
        jRadioButtonMenuItem8.setToolTipText("Activates a plastic looking material for the balls");
        jRadioButtonMenuItem8.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jRadioButtonMenuItem8);

        jRadioButtonMenuItem9.setText("Casper");
        jRadioButtonMenuItem9.setToolTipText("Activates a translucent material for the balls");
        jRadioButtonMenuItem9.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jRadioButtonMenuItem9);

        jRadioButtonMenuItem10.setText("Firefly");
        jRadioButtonMenuItem10.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem10ActionPerformed(evt);
            }
        });
        jMenu2.add(jRadioButtonMenuItem10);

        jMenuItem7.setText("Texture");
        jMenuItem7.setEnabled(false);
        jMenu2.add(jMenuItem7);

        jRadioButtonMenuItem11.setText("Metal");
        jRadioButtonMenuItem11.setToolTipText("Enables a metal looking texture for the balls");
        jRadioButtonMenuItem11.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jRadioButtonMenuItem11);

        jRadioButtonMenuItem12.setText("Cow");
        jRadioButtonMenuItem12.setToolTipText("Enables a cow looking texture for the balls");
        jRadioButtonMenuItem12.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem12ActionPerformed(evt);
            }
        });
        jMenu2.add(jRadioButtonMenuItem12);

        jMenuItem8.setText("Shader");
        jMenuItem8.setEnabled(false);
        jMenu2.add(jMenuItem8);

        jRadioButtonMenuItem13.setText("Vibration");
        jRadioButtonMenuItem13.setToolTipText("Activates the vibration shader for the balls");
        jRadioButtonMenuItem13.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem13ActionPerformed(evt);
            }
        });
        jMenu2.add(jRadioButtonMenuItem13);

        jRadioButtonMenuItem14.setText("Colorize");
        jRadioButtonMenuItem14.setToolTipText("Activates the colorize shader for the balls");
        jRadioButtonMenuItem14.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem14ActionPerformed(evt);
            }
        });
        jMenu2.add(jRadioButtonMenuItem14);
        jMenu2.add(jSeparator2);

        jCheckBoxMenuItem2.setText("Moving Sun");
        jCheckBoxMenuItem2.setToolTipText("Enables the light source to rotate around the scene");
        jCheckBoxMenuItem2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jCheckBoxMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem2);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Balls");

        jRadioButtonMenuItem1.setText("3");
        jRadioButtonMenuItem1.setToolTipText("Sets the number of balls to 3");
        jRadioButtonMenuItem1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jRadioButtonMenuItem1);

        jRadioButtonMenuItem2.setText("4");
        jRadioButtonMenuItem2.setToolTipText("Sets the number of balls to 4");
        jRadioButtonMenuItem2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jRadioButtonMenuItem2);

        jRadioButtonMenuItem3.setSelected(true);
        jRadioButtonMenuItem3.setText("5");
        jRadioButtonMenuItem3.setToolTipText("Sets the number of balls to 5");
        jRadioButtonMenuItem3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jRadioButtonMenuItem3);

        jRadioButtonMenuItem4.setText("6");
        jRadioButtonMenuItem4.setToolTipText("Sets the number of balls to 6");
        jRadioButtonMenuItem4.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jRadioButtonMenuItem4);

        jRadioButtonMenuItem5.setText("7");
        jRadioButtonMenuItem5.setToolTipText("Sets the number of balls to 7");
        jRadioButtonMenuItem5.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jRadioButtonMenuItem5);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Movement");

        jRadioButtonMenuItem6.setText("Linear");
        jRadioButtonMenuItem6.setToolTipText("Changes the movement to linear");
        jRadioButtonMenuItem6.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jRadioButtonMenuItem6);

        jRadioButtonMenuItem7.setSelected(true);
        jRadioButtonMenuItem7.setText("Quadratic");
        jRadioButtonMenuItem7.setToolTipText("Changes the movement to quadratic");
        jRadioButtonMenuItem7.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jRadioButtonMenuItem7);
        jMenu4.add(jSeparator4);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Friction");
        jCheckBoxMenuItem1.setToolTipText("Enables friction so that the balls eventually stop");
        jCheckBoxMenuItem1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("World");

        jRadioButtonMenuItem15.setSelected(true);
        jRadioButtonMenuItem15.setText("Mountain");
        jRadioButtonMenuItem15.setToolTipText("Changes the current environment to mountains");
        jRadioButtonMenuItem15.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem15ActionPerformed(evt);
            }
        });
        jMenu5.add(jRadioButtonMenuItem15);

        jRadioButtonMenuItem16.setText("Videogame");
        jRadioButtonMenuItem16.setToolTipText("Changes the current environment to videogame");
        jRadioButtonMenuItem16.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItem16ActionPerformed(evt);
            }
        });
        jMenu5.add(jRadioButtonMenuItem16);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Help");

        jMenuItem4.setText("Help");
        jMenuItem4.setToolTipText("Shows Newton's Cradle help");
        jMenu6.add(jMenuItem4);
        jMenu6.add(jSeparator3);

        jMenuItem5.setText("About...");
        jMenuItem5.setToolTipText("About this application...");
        jMenuItem5.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem5);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(jToolBar1, GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
            .addComponent(panel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panel, GroupLayout.PREFERRED_SIZE, 463, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToolBar1, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        renderer.restartCamara();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        renderer.pararMovimiento();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        renderer.cambiarRozamiento(jCheckBoxMenuItem1.getState());
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed
    private boolean arrastre = false;
    private int yOriginal = 0;
    private int xOriginal = 0;
    private boolean sentidoHorario = false;
    private int numMovimiento = 0;

    private void panelMousePressed(MouseEvent evt) {//GEN-FIRST:event_panelMousePressed
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON1) {
            int x = evt.getX() - panel.getWidth() / 2;
            int y = panel.getHeight() / 2 - evt.getY();
            int bolas = renderer.getNumBolas();
            if (bolas % 2 == 0) {
                double dist;
                for (int i = 2; i <= bolas / 2; i++) {
                    dist = Math.sqrt(Math.pow((20 + (i * -40)) - x, 2) + Math.pow(y + 40, 2));
                    if (dist < 20.0f) {
                        arrastre = true;
                        yOriginal = y;
                        xOriginal = x;
                        sentidoHorario = false;
                        numMovimiento = bolas / 2 - i + 1;
                        if (renderer.ponerArrastre(numMovimiento, sentidoHorario)) {
                            jLabel2.setText("1.0");
                        }
                        return;
                    }
                    dist = Math.sqrt(Math.pow((-20 + (i * 40)) - x, 2) + Math.pow(y + 40, 2));
                    if (dist < 20.0f) {
                        arrastre = true;
                        yOriginal = y;
                        xOriginal = x;
                        sentidoHorario = true;
                        numMovimiento = bolas - (bolas / 2 + i) + 1;
                        if (renderer.ponerArrastre(numMovimiento, sentidoHorario)) {
                            jLabel2.setText("1.0");
                        }
                        return;
                    }
                }
            } else {
                double dist;
                for (int i = 1; i <= bolas / 2; i++) {
                    dist = Math.sqrt(Math.pow((-40 * i) - x, 2) + Math.pow(y + 40, 2));
                    if (dist < 20.0f) {
                        arrastre = true;
                        yOriginal = y;
                        xOriginal = x;
                        sentidoHorario = false;
                        numMovimiento = bolas / 2 - i + 1;
                        renderer.ponerArrastre(numMovimiento, sentidoHorario);
                        return;
                    }
                    dist = Math.sqrt(Math.pow((40 * i) - x, 2) + Math.pow(y + 40, 2));
                    if (dist < 20.0f) {
                        arrastre = true;
                        yOriginal = y;
                        xOriginal = x;
                        sentidoHorario = true;
                        numMovimiento = bolas - (bolas / 2 + i);
                        renderer.ponerArrastre(numMovimiento, sentidoHorario);
                        return;
                    }
                }
            }
        }
    }//GEN-LAST:event_panelMousePressed

        private void panelMouseDragged(MouseEvent evt) {//GEN-FIRST:event_panelMouseDragged
            // TODO add your handling code here:
            if (arrastre) {
                int y = panel.getHeight() / 2 - evt.getY();
                int x = evt.getX() - panel.getWidth() / 2;
                int difX = x - xOriginal;
                int difY = y - yOriginal;
                if (difY >= 0 && ((difX > 0 && sentidoHorario) || (difX < 0 && !sentidoHorario))) {
                    difX = Math.abs(difX);
                    float angulo = (difX > difY) ? difX / 2.1f : difY / 2.1f;
                    if (sentidoHorario) {
                        renderer.arrastrarBola(angulo);
                    } else {
                        renderer.arrastrarBola(-angulo);
                    }
                }
            }
        }//GEN-LAST:event_panelMouseDragged

        private void panelMouseReleased(MouseEvent evt) {//GEN-FIRST:event_panelMouseReleased
            // TODO add your handling code here:
            if (evt.getButton() == MouseEvent.BUTTON1) {
                if (arrastre) {
                    renderer.lanzarBola();
                }
                arrastre = false;
            }
        }//GEN-LAST:event_panelMouseReleased

        private void jRadioButtonMenuItem1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem1ActionPerformed
            if (jRadioButtonMenuItem1.isSelected()) {
                renderer.cambiarNumeroBolas(3);
            }
        }//GEN-LAST:event_jRadioButtonMenuItem1ActionPerformed

        private void jRadioButtonMenuItem2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem2ActionPerformed
            if (jRadioButtonMenuItem2.isSelected()) {
                renderer.cambiarNumeroBolas(4);
            }
            seleccionarRadioButonNumBolas(evt.getSource());
        }//GEN-LAST:event_jRadioButtonMenuItem2ActionPerformed

        private void jRadioButtonMenuItem3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem3ActionPerformed
            if (jRadioButtonMenuItem3.isSelected()) {
                renderer.cambiarNumeroBolas(5);
            }
            seleccionarRadioButonNumBolas(evt.getSource());
        }//GEN-LAST:event_jRadioButtonMenuItem3ActionPerformed

        private void jRadioButtonMenuItem4ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem4ActionPerformed
            if (jRadioButtonMenuItem4.isSelected()) {
                renderer.cambiarNumeroBolas(6);
            }
            seleccionarRadioButonNumBolas(evt.getSource());
        }//GEN-LAST:event_jRadioButtonMenuItem4ActionPerformed

        private void jRadioButtonMenuItem5ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem5ActionPerformed
            if (jRadioButtonMenuItem5.isSelected()) {
                renderer.cambiarNumeroBolas(7);
            }
            seleccionarRadioButonNumBolas(evt.getSource());
        }//GEN-LAST:event_jRadioButtonMenuItem5ActionPerformed

        private void jRadioButtonMenuItem6ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem6ActionPerformed
            if (jRadioButtonMenuItem6.isSelected()) {
                renderer.cambiarMovimiento(Movimiento.MOVIMIENTO_LINEAL);
            }
            seleccionarRadioMovimiento(jRadioButtonMenuItem6);
        }//GEN-LAST:event_jRadioButtonMenuItem6ActionPerformed

        private void jRadioButtonMenuItem7ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem7ActionPerformed
            if (jRadioButtonMenuItem7.isSelected()) {
                renderer.cambiarMovimiento(Movimiento.MOVIMIENTO_CUADRATICO);
            }
            seleccionarRadioMovimiento(jRadioButtonMenuItem7);
        }//GEN-LAST:event_jRadioButtonMenuItem7ActionPerformed

        private void jRadioButtonMenuItem13ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem13ActionPerformed
            if (jRadioButtonMenuItem13.isSelected()) {
                panel.getContext().makeCurrent();
                renderer.cambiarModo(panel, GLRenderer.MODO_VIBRACION);
                panel.getContext().release();
            }
            seleccionarRadioButonApariencia(evt.getSource());
}//GEN-LAST:event_jRadioButtonMenuItem13ActionPerformed

        private void jRadioButtonMenuItem12ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem12ActionPerformed
            if (jRadioButtonMenuItem12.isSelected()) {
                panel.getContext().makeCurrent();
                renderer.cambiarModo(panel, GLRenderer.MODO_VACA);
                panel.getContext().release();
            }
            seleccionarRadioButonApariencia(evt.getSource());
}//GEN-LAST:event_jRadioButtonMenuItem12ActionPerformed

        private void jRadioButtonMenuItem11ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem11ActionPerformed
            if (jRadioButtonMenuItem11.isSelected()) {
                panel.getContext().makeCurrent();
                renderer.cambiarModo(panel, GLRenderer.MODO_METAL);
                panel.getContext().release();
            }
            seleccionarRadioButonApariencia(evt.getSource());
}//GEN-LAST:event_jRadioButtonMenuItem11ActionPerformed

        private void jRadioButtonMenuItem8ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem8ActionPerformed
            if (jRadioButtonMenuItem8.isSelected()) {
                panel.getContext().makeCurrent();
                renderer.cambiarModo(panel, GLRenderer.MODO_SIN_TEXTURA);
                panel.getContext().release();
            }
            seleccionarRadioButonApariencia(evt.getSource());
}//GEN-LAST:event_jRadioButtonMenuItem8ActionPerformed

        private void jRadioButtonMenuItem9ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem9ActionPerformed
            if (jRadioButtonMenuItem9.isSelected()) {
                panel.getContext().makeCurrent();
                renderer.cambiarModo(panel, GLRenderer.MODO_TRANSPARENTE);
                panel.getContext().release();
            }
            seleccionarRadioButonApariencia(evt.getSource());
        }//GEN-LAST:event_jRadioButtonMenuItem9ActionPerformed

        private void jRadioButtonMenuItem10ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem10ActionPerformed
            if (jRadioButtonMenuItem10.isSelected()) {
                panel.getContext().makeCurrent();
                renderer.cambiarModo(panel, GLRenderer.MODO_FIREFLY);
                panel.getContext().release();
            }
            seleccionarRadioButonApariencia(evt.getSource());
        }//GEN-LAST:event_jRadioButtonMenuItem10ActionPerformed

        private void jCheckBoxMenuItem2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ActionPerformed
            renderer.setMovimientoSol(jCheckBoxMenuItem2.isSelected());
        }//GEN-LAST:event_jCheckBoxMenuItem2ActionPerformed

        private void jRadioButtonMenuItem14ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem14ActionPerformed
            if (jRadioButtonMenuItem14.isSelected()) {
                panel.getContext().makeCurrent();
                renderer.cambiarModo(panel, GLRenderer.MODO_COLORIZE);
                panel.getContext().release();
            }
            seleccionarRadioButonApariencia(evt.getSource());
        }//GEN-LAST:event_jRadioButtonMenuItem14ActionPerformed

        private void jRadioButtonMenuItem15ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem15ActionPerformed
            if (jRadioButtonMenuItem15.isSelected()) {
                panel.getContext().makeCurrent();
                renderer.cambiarSkyBox(panel, TEXTURA_MONTANA);
                panel.getContext().release();
            }
            seleccionarRadioMundo(jRadioButtonMenuItem15);
        }//GEN-LAST:event_jRadioButtonMenuItem15ActionPerformed

        private void jRadioButtonMenuItem16ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItem16ActionPerformed
            if (jRadioButtonMenuItem16.isSelected()) {
                panel.getContext().makeCurrent();
                renderer.cambiarSkyBox(panel, TEXTURA_MARIO);
                panel.getContext().release();
            }
            seleccionarRadioMundo(jRadioButtonMenuItem16);
        }//GEN-LAST:event_jRadioButtonMenuItem16ActionPerformed

        private void jMenuItem5ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
            // About...
            About about = new About();
                about.setLocationRelativeTo(null);
            about.setVisible(true);
        }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void seleccionarRadioButonNumBolas(Object cual) {
        if (!jRadioButtonMenuItem1.equals(cual)) {
            jRadioButtonMenuItem1.setSelected(false);
        }
        if (!jRadioButtonMenuItem2.equals(cual)) {
            jRadioButtonMenuItem2.setSelected(false);
        }
        if (!jRadioButtonMenuItem3.equals(cual)) {
            jRadioButtonMenuItem3.setSelected(false);
        }
        if (!jRadioButtonMenuItem4.equals(cual)) {
            jRadioButtonMenuItem4.setSelected(false);
        }
        if (!jRadioButtonMenuItem5.equals(cual)) {
            jRadioButtonMenuItem5.setSelected(false);
        }
        ((JRadioButtonMenuItem) cual).setSelected(true);
    }

    private void seleccionarRadioMovimiento(JRadioButtonMenuItem cual) {
        if (cual.equals(jRadioButtonMenuItem6)) {
            jRadioButtonMenuItem6.setSelected(true);
            jRadioButtonMenuItem7.setSelected(false);
        } else {
            jRadioButtonMenuItem6.setSelected(false);
            jRadioButtonMenuItem7.setSelected(true);
        }
    }

    private void seleccionarRadioMundo(JRadioButtonMenuItem cual) {
        if (cual.equals(jRadioButtonMenuItem15)) {
            jRadioButtonMenuItem15.setSelected(true);
            jRadioButtonMenuItem16.setSelected(false);
        } else {
            jRadioButtonMenuItem15.setSelected(false);
            jRadioButtonMenuItem16.setSelected(true);
        }
    }

    private void seleccionarRadioButonApariencia(Object cual) {
        if (!jRadioButtonMenuItem8.equals(cual)) {
            jRadioButtonMenuItem8.setSelected(false);
        }
        if (!jRadioButtonMenuItem9.equals(cual)) {
            jRadioButtonMenuItem9.setSelected(false);
        }
        if (!jRadioButtonMenuItem10.equals(cual)) {
            jRadioButtonMenuItem10.setSelected(false);
        }
        if (!jRadioButtonMenuItem11.equals(cual)) {
            jRadioButtonMenuItem11.setSelected(false);
        }
        if (!jRadioButtonMenuItem12.equals(cual)) {
            jRadioButtonMenuItem12.setSelected(false);
        }
        if (!jRadioButtonMenuItem13.equals(cual)) {
            jRadioButtonMenuItem13.setSelected(false);
        }
        if (!jRadioButtonMenuItem14.equals(cual)) {
            jRadioButtonMenuItem14.setSelected(false);
        }
        ((JRadioButtonMenuItem) cual).setSelected(true);
    }


    /**
     * Called from within initComponents().
     * hint: to customize the generated code choose 'Customize Code' in the contextmenu
     * of the selected UI Component you wish to cutomize in design mode.
     * @return Returns customized GLCapabilities.
     */
    private GLCapabilities createGLCapabilites() {

        GLCapabilities capabilities = new GLCapabilities();
        capabilities.setHardwareAccelerated(true);

        // try to enable 2x anti aliasing - should be supported on most hardware
        capabilities.setNumSamples(2);
        capabilities.setSampleBuffers(true);

        return capabilities;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Run this in the AWT event thread to prevent deadlocks and race conditions
        EventQueue.invokeLater(new Runnable() {

            public void run() {

                // switch to system l&f for native font rendering etc.
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.INFO, "can not enable system look and feel", ex);
                }

                Newton1 frame = new Newton1();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JCheckBoxMenuItem jCheckBoxMenuItem1;
    private JCheckBoxMenuItem jCheckBoxMenuItem2;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JMenu jMenu1;
    private JMenu jMenu2;
    private JMenu jMenu3;
    private JMenu jMenu4;
    private JMenu jMenu5;
    private JMenu jMenu6;
    private JMenuBar jMenuBar1;
    private JMenuItem jMenuItem1;
    private JMenuItem jMenuItem2;
    private JMenuItem jMenuItem3;
    private JMenuItem jMenuItem4;
    private JMenuItem jMenuItem5;
    private JMenuItem jMenuItem6;
    private JMenuItem jMenuItem7;
    private JMenuItem jMenuItem8;
    private JRadioButtonMenuItem jRadioButtonMenuItem1;
    private JRadioButtonMenuItem jRadioButtonMenuItem10;
    private JRadioButtonMenuItem jRadioButtonMenuItem11;
    private JRadioButtonMenuItem jRadioButtonMenuItem12;
    private JRadioButtonMenuItem jRadioButtonMenuItem13;
    private JRadioButtonMenuItem jRadioButtonMenuItem14;
    private JRadioButtonMenuItem jRadioButtonMenuItem15;
    private JRadioButtonMenuItem jRadioButtonMenuItem16;
    private JRadioButtonMenuItem jRadioButtonMenuItem2;
    private JRadioButtonMenuItem jRadioButtonMenuItem3;
    private JRadioButtonMenuItem jRadioButtonMenuItem4;
    private JRadioButtonMenuItem jRadioButtonMenuItem5;
    private JRadioButtonMenuItem jRadioButtonMenuItem6;
    private JRadioButtonMenuItem jRadioButtonMenuItem7;
    private JRadioButtonMenuItem jRadioButtonMenuItem8;
    private JRadioButtonMenuItem jRadioButtonMenuItem9;
    private Separator jSeparator1;
    private Separator jSeparator2;
    private Separator jSeparator3;
    private Separator jSeparator4;
    private JToolBar jToolBar1;
    private GLJPanel panel;
    // End of variables declaration//GEN-END:variables
}
