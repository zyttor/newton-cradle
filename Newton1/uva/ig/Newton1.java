/*
 * Newton1.java
 *
 * Created on 30. Juli 2008, 16:18
 */
package uva.ig;

import com.sun.opengl.util.Animator;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.opengl.GLCapabilities;
import javax.media.opengl.GLJPanel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu.Separator;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

/**
 *
 * @author cylab
 * @author mbien
 */
public class Newton1 extends JFrame {

    private Animator animator;
    private GLRenderer renderer;

    /** Creates new form MainFrame */
    public Newton1() {
        initComponents();
        setTitle("Newton's Cradle");

        renderer = new GLRenderer();
        panel.addGLEventListener(renderer);
        animator = new Animator(panel);

        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });

        this.addKeyListener(new KeyAdapter() {

            @Override
            public void keyPressed(KeyEvent evt) {

                if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
                    renderer.moverCamara(1);
                } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
                    renderer.moverCamara(2);
                } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
                    if ((evt.getModifiers() & KeyEvent.CTRL_DOWN_MASK) == KeyEvent.CTRL_DOWN_MASK) {
                        renderer.subirVelocidad();
                    } else {
                        renderer.moverCamara(3);
                    }
                } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                    renderer.moverCamara(4);
                } else if (evt.getKeyCode() == KeyEvent.VK_PLUS || evt.getKeyCode() == KeyEvent.VK_ADD) {
                    renderer.moverCamara(5);
                } else if (evt.getKeyCode() == KeyEvent.VK_MINUS || evt.getKeyCode() == KeyEvent.VK_SUBTRACT) {
                    renderer.moverCamara(6);
                }
            }
        });

        animator.start();
    }

    @Override
    public void setVisible(boolean show) {
        if (!show) {
            animator.stop();
        }
        super.setVisible(show);
        if (!show) {
            animator.start();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new GLJPanel(createGLCapabilites());
        jMenuBar1 = new JMenuBar();
        jMenu1 = new JMenu();
        jMenuItem1 = new JMenuItem();
        jMenuItem2 = new JMenuItem();
        jSeparator1 = new Separator();
        jMenuItem3 = new JMenuItem();
        jMenu2 = new JMenu();
        jMenuItem16 = new JMenuItem();
        jMenuItem4 = new JMenuItem();
        jMenuItem5 = new JMenuItem();
        jMenuItem17 = new JMenuItem();
        jMenuItem18 = new JMenuItem();
        jSeparator2 = new Separator();
        jMenuItem15 = new JMenuItem();
        jSeparator3 = new Separator();
        jMenuItem11 = new JMenuItem();
        jMenuItem12 = new JMenuItem();
        jMenu3 = new JMenu();
        jMenuItem6 = new JMenuItem();
        jMenuItem7 = new JMenuItem();
        jMenuItem8 = new JMenuItem();
        jMenuItem9 = new JMenuItem();
        jMenuItem10 = new JMenuItem();
        jMenu4 = new JMenu();
        jMenuItem13 = new JMenuItem();
        jMenuItem14 = new JMenuItem();
        jSeparator4 = new Separator();
        jCheckBoxMenuItem1 = new JCheckBoxMenuItem();
        jMenu5 = new JMenu();
        jMenuItem19 = new JMenuItem();
        jSeparator5 = new Separator();
        jMenuItem20 = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        panel.setPreferredSize(new Dimension(600, 400));
        panel.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                panelMousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                panelMouseReleased(evt);
            }
        });
        panel.addMouseMotionListener(new MouseMotionAdapter() {
            public void mouseDragged(MouseEvent evt) {
                panelMouseDragged(evt);
            }
        });

        GroupLayout panelLayout = new GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(Alignment.LEADING)
            .addGap(0, 473, Short.MAX_VALUE)
        );

        jMenu1.setText("Cradle");

        jMenuItem1.setText("Restart animation");
        jMenuItem1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Restart camera");
        jMenuItem2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator1);

        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Mode");

        jMenuItem16.setText("Material");
        jMenuItem16.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem16);

        jMenuItem4.setText("Cow");
        jMenuItem4.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Metal");
        jMenuItem5.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem17.setText("Firefly");
        jMenuItem17.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem17);

        jMenuItem18.setText("Translucent");
        jMenuItem18.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem18);
        jMenu2.add(jSeparator2);

        jMenuItem15.setText("Toon (shader)");
        jMenuItem15.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem15);
        jMenu2.add(jSeparator3);

        jMenuItem11.setText("Can Can (prueba)");
        jMenuItem11.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuItem12.setText("Suicida (prueba)");
        jMenuItem12.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem12);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Balls");

        jMenuItem6.setText("3");
        jMenuItem6.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuItem7.setText("4");
        jMenuItem7.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem8.setText("5");
        jMenuItem8.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem9.setText("6");
        jMenuItem9.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem9);

        jMenuItem10.setText("7");
        jMenuItem10.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Movement");

        jMenuItem13.setText("Linear");
        jMenuItem13.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem13);

        jMenuItem14.setText("Quadratic");
        jMenuItem14.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem14);
        jMenu4.add(jSeparator4);

        jCheckBoxMenuItem1.setText("Friction");
        jCheckBoxMenuItem1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu4.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Help");

        jMenuItem19.setText("Help");
        jMenu5.add(jMenuItem19);
        jMenu5.add(jSeparator5);

        jMenuItem20.setText("About");
        jMenu5.add(jMenuItem20);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(panel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(panel, GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        renderer.restartCamara();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        renderer.pararMovimiento();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        renderer.cambiarNumeroBolas(3);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        renderer.cambiarNumeroBolas(4);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        renderer.cambiarNumeroBolas(5);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        renderer.cambiarNumeroBolas(6);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        renderer.cambiarNumeroBolas(7);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem13ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        renderer.cambiarMovimiento(1);
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem14ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        renderer.cambiarMovimiento(2);
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        renderer.cambiarRozamiento(jCheckBoxMenuItem1.getState());
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void jMenuItem12ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        renderer.cambiarAnguloMax(180);
}//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem11ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        renderer.setTodasMovimiento();
}//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem15ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        // TODO add your handling code here:
        panel.getContext().makeCurrent();
        renderer.cambiarModo(panel, GLRenderer.MODO_TOON);
        panel.getContext().release();
}//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jMenuItem5ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        panel.getContext().makeCurrent();
        renderer.cambiarModo(panel, GLRenderer.MODO_METAL);
        panel.getContext().release();
}//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        panel.getContext().makeCurrent();
        renderer.cambiarModo(panel, GLRenderer.MODO_VACA);
        panel.getContext().release();
}//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem16ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        // TODO add your handling code here:
        panel.getContext().makeCurrent();
        renderer.cambiarModo(panel, GLRenderer.MODO_SIN_TEXTURA);
        panel.getContext().release();
}//GEN-LAST:event_jMenuItem16ActionPerformed
    private boolean arrastre = false;
    private int yOriginal = 0;
    private int xOriginal = 0;
    private boolean sentidoHorario = false;
    private int numMovimiento = 0;

    private void panelMousePressed(MouseEvent evt) {//GEN-FIRST:event_panelMousePressed
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON1) {
            int x = evt.getX() - panel.getWidth() / 2;
            int y = panel.getHeight() / 2 - evt.getY();
            int bolas = renderer.getNumBolas();
            if (bolas % 2 == 0) {
                double dist;
                for (int i = 2; i <= bolas / 2; i++) {
                    dist = Math.sqrt(Math.pow((20 + (i * -40)) - x, 2) + Math.pow(y + 40, 2));
                    if (dist < 20.0f) {
                        System.out.println("Bola " + (bolas / 2 - i + 1));
                        arrastre = true;
                        yOriginal = y;
                        xOriginal = x;
                        sentidoHorario = false;
                        numMovimiento = bolas / 2 - i + 1;
                        renderer.ponerArrastre(numMovimiento, sentidoHorario);
                        return;
                    }
                    dist = Math.sqrt(Math.pow((-20 + (i * 40)) - x, 2) + Math.pow(y + 40, 2));
                    if (dist < 20.0f) {
                        System.out.println("Bola " + (bolas / 2 + i));
                        arrastre = true;
                        yOriginal = y;
                        xOriginal = x;
                        sentidoHorario = true;
                        numMovimiento = bolas - (bolas / 2 + i) + 1;
                        renderer.ponerArrastre(numMovimiento, sentidoHorario);
                        return;
                    }
                }
            } else {
                double dist;
                for (int i = 1; i <= bolas / 2; i++) {
                    dist = Math.sqrt(Math.pow((-40 * i) - x, 2) + Math.pow(y + 40, 2));
                    if (dist < 20.0f) {
                        System.out.println("Bola " + (bolas / 2 - i + 1));
                        arrastre = true;
                        yOriginal = y;
                        xOriginal = x;
                        sentidoHorario = false;
                        numMovimiento = bolas / 2 - i + 1;
                        renderer.ponerArrastre(numMovimiento, sentidoHorario);
                        return;
                    }
                    dist = Math.sqrt(Math.pow((40 * i) - x, 2) + Math.pow(y + 40, 2));
                    if (dist < 20.0f) {
                        System.out.println("Bola " + (bolas / 2 + i + 1));
                        arrastre = true;
                        yOriginal = y;
                        xOriginal = x;
                        sentidoHorario = true;
                        numMovimiento = bolas - (bolas / 2 + i);
                        renderer.ponerArrastre(numMovimiento, sentidoHorario);
                        return;
                    }
                }
            }
            System.out.println(x + " " + y);
        }
    }//GEN-LAST:event_panelMousePressed

        private void panelMouseDragged(MouseEvent evt) {//GEN-FIRST:event_panelMouseDragged
            // TODO add your handling code here:
            if (arrastre) {
                int y = panel.getHeight() / 2 - evt.getY();
                int x = evt.getX() - panel.getWidth() / 2;
                int difX = x - xOriginal;
                int difY = y - yOriginal;
                System.out.println(difX + " " + difY);
                if (difY >= 0 && ((difX > 0 && sentidoHorario) || (difX < 0 && !sentidoHorario))) {
                    difX = Math.abs(difX);
                    float angulo = (difX > difY) ? difX / 2.1f : difY / 2.1f;
                    if (sentidoHorario) {
                        renderer.arrastrarBola(angulo);
                    } else {
                        renderer.arrastrarBola(-angulo);
                    }
                }
            }
        }//GEN-LAST:event_panelMouseDragged

        private void panelMouseReleased(MouseEvent evt) {//GEN-FIRST:event_panelMouseReleased
            // TODO add your handling code here:
            if (evt.getButton() == MouseEvent.BUTTON1) {
                if (arrastre) {
                    renderer.lanzarBola();
                }
                arrastre = false;
            }
        }//GEN-LAST:event_panelMouseReleased

        private void jMenuItem17ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
            // Firefly mode
            panel.getContext().makeCurrent();
            renderer.cambiarModo(panel, GLRenderer.MODO_LUCIERNAGA);
            panel.getContext().release();
        }//GEN-LAST:event_jMenuItem17ActionPerformed

        private void jMenuItem18ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
            // Translucent mode
            panel.getContext().makeCurrent();
            renderer.cambiarModo(panel, GLRenderer.MODO_TRANSLUCIDO);
            panel.getContext().release();
        }//GEN-LAST:event_jMenuItem18ActionPerformed

    /**
     * Called from within initComponents().
     * hint: to customize the generated code choose 'Customize Code' in the contextmenu
     * of the selected UI Component you wish to cutomize in design mode.
     * @return Returns customized GLCapabilities.
     */
    private GLCapabilities createGLCapabilites() {

        GLCapabilities capabilities = new GLCapabilities();
        capabilities.setHardwareAccelerated(true);

        // try to enable 2x anti aliasing - should be supported on most hardware
        capabilities.setNumSamples(2);
        capabilities.setSampleBuffers(true);

        return capabilities;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // Run this in the AWT event thread to prevent deadlocks and race conditions
        EventQueue.invokeLater(new Runnable() {

            public void run() {

                // switch to system l&f for native font rendering etc.
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.INFO, "can not enable system look and feel", ex);
                }

                Newton1 frame = new Newton1();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JCheckBoxMenuItem jCheckBoxMenuItem1;
    private JMenu jMenu1;
    private JMenu jMenu2;
    private JMenu jMenu3;
    private JMenu jMenu4;
    private JMenu jMenu5;
    private JMenuBar jMenuBar1;
    private JMenuItem jMenuItem1;
    private JMenuItem jMenuItem10;
    private JMenuItem jMenuItem11;
    private JMenuItem jMenuItem12;
    private JMenuItem jMenuItem13;
    private JMenuItem jMenuItem14;
    private JMenuItem jMenuItem15;
    private JMenuItem jMenuItem16;
    private JMenuItem jMenuItem17;
    private JMenuItem jMenuItem18;
    private JMenuItem jMenuItem19;
    private JMenuItem jMenuItem2;
    private JMenuItem jMenuItem20;
    private JMenuItem jMenuItem3;
    private JMenuItem jMenuItem4;
    private JMenuItem jMenuItem5;
    private JMenuItem jMenuItem6;
    private JMenuItem jMenuItem7;
    private JMenuItem jMenuItem8;
    private JMenuItem jMenuItem9;
    private Separator jSeparator1;
    private Separator jSeparator2;
    private Separator jSeparator3;
    private Separator jSeparator4;
    private Separator jSeparator5;
    private GLJPanel panel;
    // End of variables declaration//GEN-END:variables
}
